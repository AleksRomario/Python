#!/usr/bin/env python3

# Рекурсия -  вызов функции самой из себя.

def pow(x, n):
    if n == 0:
        return 1
    else:
        return x * pow(x, n-1)

print(pow(3, 4))

# Функции с произвольным числом аргументов

print("--- a, b = (1, 2) ---")
a, b = (1, 2)
print("a = ", a)
print("b = ", b)

print("--- a, *b = (1, 2, 3, 4, 5) ---")
a, *b = (1, 2, 3, 4, 5)
print("a = ", a)
print("b = ", b)

print("--- *a, b = (1, 2, 3, 4, 5) ---")
*a, b = (1, 2, 3, 4, 5)
print("a = ", a)
print("b = ", b)

print("---  *a, b = 'Hello' ---")
*a, b = "Hello"
print("a = ", a)
print("b = ", b)

# применимо так же и обратно распаковывание 
# пример использования диапазона 
print("--- диапазон от -5 до 5 ---")

for x in range(-5, 6):
    print(x, end=" ")
print("\n")

# пример использования диапазона одной переменной в которой список
print("--- диапазон от -5 до 5 c (*a) ---")
a = [-5, 6] # диапазон от -5 до 5
for x in range(*a): 
    # просто использовать (a) вызовет ошибку. Использовать (*а) 
    print(x, end=" ")
print("\n")

# Этот оператор можно использовать для объявления функций с произвольным 
# числом аргументов
print("--- распечатывание аргументов ---")
def myFunc(*args):
    print(args)

myFunc()
myFunc(1)
myFunc(1, 2)
myFunc(1, 2, 3)
myFunc(True, False, "Hello")
myFunc("Hello")

# перебор аргументов в самой функции
print("--- Передача неограниченных аргументов ---")
def myFunc1(*args):
    result = 0
    for arg in args: 
        result += arg
    return result

print(myFunc1(1, 2, 3, 4, 5))

# при передачи неграниченом количестве именованных аргументов
# следует записывать
print("--- передача именованных неограниченных аргументов ---")
def myFunc2(**kwargs):
    print(kwargs)

myFunc2(arg1 = 1, arg2 = 2, arg3 = 3)

# из вывода видно что получается словарь
# теперь мы можем перебирать словарь таким образом:

def myFunc3(**kwargs):
    for name, value in kwargs.items():
        print(name, value)

myFunc3(arg1 = 4, arg2 = 5, arg3 = 6)

# при необходимости передачи именованных и не именованных параметров

def myFunc4(*args, **kwargs):
    print(args)
    print(kwargs)

myFunc4(1, 2, 3, arg1= 4, arg2 = 5, arg3 = 6)
    
# неименованные аргументы должны всегда следовать перед именованными
# сначала фактические параметры, затем необязательный список args, 
# затем формальные параметры и потом список этих параметров.

def myFunc5(x, y, *args, sep="sep", end="end", **kwargs):
    print(args)
    print(kwargs)
    print(x, y)
    print(sep, end)

myFunc5(True , False , 1, 2, 3, 4, 5 , sep="SEP", end="END", k1="a1", k2="a2")

# Анонимные или лямбда-функции
print("--- Ламбда функции: вывод нечетных значений. ---")

# Фунция showElements, которая отображает из списка lst только те элементы
# для которых функция func возвращает значение True.
def showElements(lst, func):
    for x in lst:
        if func(x):
            print(x)

# Вспомогательная функция, которая возвращает Ture для нечетных значений.
def __odd(x):
    return True if x%2 != 0 else False

a = [1, 2, 3, 4, 5, 6, 7]
showElements(a, __odd)

# дабы возвращать четные значения необходимо создать отдельную функцию,
# но это не удобно. 
# На помощь приходят lambda-функции. 
# Объявлябтся они в любом месте по синтаксису:
# lambda arg1, arg2, ... : выражение

print
# Объявление
r = lambda a, b: a + b 
# Вызов
print("Лямбда-функция равна: ", r(1, 2))

# в анонимных функциях можно писать после двоеточий любой оператор,
# но только один. Несколько нельзя.
# результат работы этого оператора возвращается лямбда-функцией.

# использование лямбда функции как аргумента: 
print("--- Вызов c лямбда функцией в качестве аргумента: ---")

showElements(a, lambda x: True if x%2 != 0 else False)

# Если анонимная функция не принимает никаких аргументов, записывается:
print("--- lambda функция без аргументов")
p = lambda : "Без аргументов"
print(p())

# Задание для самоподготовки : 
# 1. Написать рекурсивную функцию для вычисления факториала числа n:
# n! = 1 * 2 * 3 * ... * n 

# 2. Написать функцию для вычисления среднего арифметического переданных
# ей значений в виде аргументов:
# arg1, arg2, …, argN

# Реализовать функцию сортировки выбранных элементов по возрастанию:
# элементы передаются функции в виде списка и выбираются они с помощью
# функции-селектора, указанной в качестве второго параметра.
# Привести примеры вызова функции сортировки с разными видами селекторов.
# Селекторы реализовать в виде лямбда-функций.
