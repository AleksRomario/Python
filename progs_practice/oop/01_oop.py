#!/usr/bin/env python3
print("--- Парадигма ООП, базовые приемы работы с классом ---")

# Основные концепции, лежащие в основе парадигмы ООП:
# инкапсуляция - размещение в одном компоненте данных и методов, которые 
# с ними работают. Также может означать скрытие внутренней реализации от 
# других компонентов. Например, доступ к скрытой переменной может 
# предоставляться не напрямую, а с помощью методов для чтения (геттер) 
# и изменения (сеттер) её значения.

# наследование - концепция объектно-ориентированного программирования, 
#согласно которой абстрактный тип данных может наследовать данные и 
# функциональность некоторого существующего типа, способствуя повторному 
# использованию компонентов программного обеспечения.

# полиформизм -это способность обьекта использовать методы производного 
# класса, который не существует на момент создания базового. В новом 
# созданном классе можно вызывать функции наследуемого класса так, словно 
# они определены в новом.

class Point:
    """Класс для представления координат точек на плоскости
ещё одна строка для описания документции"""
    x = 1 
    y = 1 
print("\n")
print("Вывод документации:")
# Документацией является первая строчка в классе
print(Point.__doc__)
print("\n")
print("Вывод имени класса:")
print(Point.__name__)
print("\n")
pt = Point()
print(dir(pt))
print(pt.__dict__)
print("\n")
pt.x = 10 
pt.y = 19
print(pt.__dict__)
print("pt.__doc__")
print(pt.__doc__)
print("pt.__dict__")
print(pt.__dict__)
print("Point.__dict__")
print(Point.__dict__)


print("\n")
print("Работа с атрибутами")
# работа с атрибутами класса
print("\n")
print("---возвращение атрибута---")
# возвращение атрибута
str = "Нет такого атрибута"
print("Атрибут x рaвняется: ", getattr(pt, "x", str))
print("Атрибут z рaвняется: ", getattr(pt, "z", str ))
print("\n")
print("---проверка аттрибута в объекте---")
# проверка аттрибута в объекте
print("Есть ли атрибут z в объектк pt: ", hasattr(pt, "z"))
print("Проверка наличия аттрибутов в pt:", pt.__dict__)
print("\n")
print("---Задание нового атрибута, создается при его отсутствии---")
# Задание нового атрибута, создается при его отсутствии
setattr(pt, "z", 99)
print("Добавленный атрибут z равняется: ", getattr(pt, "z", str))
print("Проверка наличия аттрибутов в pt:", pt.__dict__)
print("\n")
print("---Удаление атрибута из pt---")
delattr(pt, "z")
print("Проверка наличия аттрибутов в pt:", pt.__dict__)
print("\n")


# Задание для самоподготовки

# Объявите класс Point3D для точек с тремя координатами x, y, z. 
# Создайте несколько экземпляров этого класса и через них выведите в 
# консоль значения x,y,z. Далее, сделайте следующие манипуляции:

# - поменяйте любое значение координаты в классе Point3D и посмотрите как 
# это повлияет на отображаемые величины экземпляров класса;

# - удалите координату z в классе Point3D и убедитесь, что она будет 
# отсутствовать во всех экземплярах;

# - поменяйте координату в каком-либо экземпляре класса и посмотрите 
# на результат.
