#!/usr/bin/env python3
print("--- Метод класса, конструктор и деструктор ---")

class Point:
    x = 1 
    y = 1 
    def setCoords(self, x, y):
        self.x = x
        self.y = y

pt = Point()
pt.setCoords(10, 11) 
# Вызов метода у копии класса - указываются только данные 
# указатель класса(копии) указывать нет необходимости
# Python автоматически укажет указаль с помощью указанного нами self 
print(pt.__dict__)

# для вызыва метода из класса а не у копии , следует указывать параметр 
# у которого необходимо произвести изменение 
Point.setCoords(pt, 12, 14)
print(pt.__dict__)

print("\n")
print("--- Конструктор класса ---")
# В момент создания экземпляра класса можно сразу указывать локальные 
# аттрибуты. Реализуется это через метод __init__()

class Coords3d():
    x = 1 
    y = 1 
    z = 1 
    def setCoords3d(self, x , y , z):
        self.x = x 
        self.y = y
        self.z = z

    def __init__(self, x = 0 , y = 0 , z = 0):
        # определяем значения по умолчанию, в случае не указания
        print("Создание координат при создании экземпляра класса Coords3d")
        self.x = x 
        self.y = y
        self.z = z 
pt3d = Coords3d()
print(pt3d.__dict__)
print("Переопределение координат через метод setCoords3d()")
pt3d.setCoords3d(1, 2, 3)
print(pt3d.__dict__)

print("\n")
print("Деконструктор класса")
# Противоположный конструктору метод _del__()
# Уничтожение объектов при выполнении 

class LinePoints():
    x1 = 1
    y1 = 1
    x2 = 2
    y2 = 2
    
    def __init__(self, x1 = 0, y1 = 0, x2 = 0, y2 = 0):
        print("Инициализация координат") 
        self.x1 = x1
        self.y1 = y1
        self.x2 = x2 
        self.y2 = y2
    
    def setLinePoints(self, x1, y1, x2, y2):
        print("Задани координат через setLinesCoords")
        self.x1 = x1
        self.y1 = y1
        self.x2 = x2 
        self.y2 = y2

    def __del__(self):
        print("Деструкция координат")

lp = LinePoints(5, 6, 7, 8)
print(lp.__dict__)
lp.setLinePoints(11, 12, 13, 14)
print(lp.__dict__)


print("\n")
print("Задание для самоподготовки: ")


# 1. Создайте класс Point3D, который хранит координаты в виде списка. 
# Пропишите у него конструктор для создания экземпляров с локальными 
# координатами. Также добавьте методы, позволяющие изменять координаты 
# и получать их (в виде кортежа).

# 2. Объявите класс Point с конструктором, который бы позволял создавать 
# экземпляр на основе другого, уже существующего. Если аргументы в 
# конструктор не передаются, то создается объект с локальными атрибутами 
# по умолчанию.

# 3. Напишите программу, в которой пользователь вводит координаты x, y 
# с клавиатуры, создается соответствующий экземпляр и он сохраняется в 
# списке. Количество вводимых объектов N=5. Затем, вывести их атрибуты 
# в консоль.
