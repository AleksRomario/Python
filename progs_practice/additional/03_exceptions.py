#!/usr/bin/env python3 
print("--- Exeprions ---")

# Как пример вызыва ошибки: 

# IndexError
# a = []
# a.pop()

# ZeroDivisionError
# 5/0

# ValueError
# int("12as")

# TypeError
#"t" + 5

# все ошибки это не что иное, как возникновение исключительных ситуаций 
# или попросту исключений 
# Предположим программу вычисления деления двух чисел: 

# для реализации ловли exceptrion необходимо начинать с блока try
try:
    x = input("Введите X: ")
    y = input("Введите Y: ")

    x = int(x)
    y = int(y)

    res = x/y 

# в случае если блок try не вызывает ошибок блок except иногируется
# при делении на 0  вызывается ошибка ZeroDivisionError
# обрабатываем её в блоке exception:

except ZeroDivisionError:
    res = "деление на 0 не возможно!"
except ValueError:
    res = "Введенный параметр(ы) должны является числом!"

print("Результат деления:", res)

print("\n")
print("--- пример указания служебного сообщения  ---")
# в случае ошибки можно выводить служебное сообщение
# для отображения служебного сообщения пишется в формате:

try:
    x = input("Введите число X: ")
    y = input("Введите число Y: ")
    x = int(x)
    y = int(y)

    res = x/y 
except ZeroDivisionError as z:
    res = z
except ValueError as v:
    res = v 
else:
# так же может присутствовать необязательный блок else: 
# данный блок будет выполнен если блок try выполнится без ошибок
# и не выполнится если при выполнении будет выполнен блок exceprion 
    print("Исключений не произошло")
finally: 
# другой не обязательный блок finally
# данный блок будет выполнен только в том случае если произойдет exception
# и не будет выполнен если все прошло гладко 
    print("Произошла ошибка в течении вычисления: ")
print("Результат деления: ", res)

print("\n")
print("--- Пример выполнения блока finally до выполнения return ---")

def getValues():
    x = input("x: ")
    y = input("y: ")
    try:
        x = int(x)
        y = int(y)
        z = 6 
        return x,y,z
    except ValueError as v:
        print(v)
        return 1,4,6
    finally:
        print("finally выполняется до return")
# пример возвращения параметров и присваивания их кортежем 
x,y,z = getValues()
print(x,y,z)


print("\n")
print("--- Пример блока except без указания имени класса исключения ---")

x = input("x: ")
y = input("y: ")
try:
    x = int(x)
    y = int(y)
 
    res = x/y
except:
    print("Произошло исключение")
else:
    print("Исключений не произошло")
finally:
    print("Блок finally выполняется всегда")
 
print(res)
# Данный пример показывает возможность но не является самодостаточным


print("\n")
print("--- Задание для самоподготовки  ---")


# 1. Напишите программу ввода натуральных чисел через запятую и 
# преобразования этой строки в список целых чисел. (Используйте здесь 
# функцию map для преобразования элементов последовательности строк в 
# последовательность чисел). Реализовать обработку возможных исключений 
# при таком преобразовании.

# 2. Написать функцию вычисления среднего арифметического элементов 
# переданного ей списка. Реализовать обработку возможных исключений 
# при ее работе.

# 3. Написать функцию-генератор (с использованием оператора yield) для 
# удаления произвольного элемента из множества (с помощью метода pop()). 
# Функция должна возвращать :wзначение удаленного элемента. Реализовать обработку возможных исключений при ее работе.
