#!/usr/bin/env python3

# Исключения, файлы и полезные функции
# Функции map. 
# Позволяет преобразовывать элементы итерируемого объекта в соответствии 
# с некоторой указанной функцией: map(func, *iterables)

# упорядоченный список 
lst = [1, -2, 3, -4, -5]
# предположим получение списка из квадратов этих чисел. 
# возведение числа в квадрат: 
def sq(x):
    return x**2


# вызов функции map
print("\n")
print("--- вызов функции map ---")
b = map(sq, lst)
print(type(b))
print(type(lst))
print(type(sq))

#перебора всех значений можно воспользоваться функцией next
print(next(b))
print(next(b))
print(next(b))
# или сформировать новый список с помощью функции list:
# выводит оставшиеся элементы которые ранее быле не итерированы через next()


print("\n")
print("--- вывод оставшихся элементов преобразованных в список")
lst2 = list(b)
print(type(lst2))
print(lst2)

# То есть, функция map к каждому элементу списка lst применяет функцию 
# sq и возвращает объект-генератор для последовательного выбора новых, 
# преобразованных значений. В некотором смысле, это эквивалент вот такого 
# выражения-генератора:


print("\n")
print("--- выражения-генератора ---")
c = (sq(x) for x in [1, -2, 3, -4, -5])
print(type(c))
print(c)
print(next(c))
print(next(c))
print(next(c))
lst3 = list(c)
print(lst3, type(lst3))


print("\n")
print("--- альтернатиавное написание списка ---")
# или такого списка 
d = [sq(1), sq(-2), sq(3), sq(-4), sq(-5)]
print(d, type(d))


print("\n")
print("--- возвращение нескольких параметров ---")
# вот возвращать она может несколько аргументов 
def sq2(x):
    return x, x**2


lst = [1,-2,3,-4,-5]
b = map(sq2, lst)
a = list(b)
print(a, type(a))
# результатом будет список с кортежами
# Таким образом можно выполнять преобразования с любыми типами данных


print("\n")
print("--- применение к strings ---")
lst = ["Москва", "Рязань", "Смоленск", "Тверь", "Томск"]
b = map(len, lst)
a = list(b)
# На выходе получим список с длинами соответствующих строк:
print(a)


print("\n")
# применить встроенные строковые методы
print("--- примениe встроенныx строковыx методов str.upper ---")
lst = ["Москва", "Рязань", "Смоленск", "Тверь", "Томск"]
b = map(str.upper, lst)
c = list(b)
print(c)


print("\n")
print("--- Изменение символа ---")
b = map(lambda x: x.replace("а", "А"), lst)
lst = list(b)
print(lst)
# Довольно часто первым аргументом функции map указывают 
# анонимные (лямбда) функции


print("\n")
print("--- указание первым аргументом map(): лямбдо фунуции ---")
# записанные строки наоборот 
print("--- сортировка символов ---")
b = map(lambda x : x[::-1], lst)
c = map(sorted, b)
res1 = list(c)
print(res1)
print("\n")


print("\n")
print("--- введение чисел через пробел  ---")

# введение чисел и разделение их через пробел (split по умолчанию без 
# параметров будет разделять используя пробел)
a = input().split()
print(type(a), a)

# к list нельзя напрямую применить int, таким образом можно к каждому 
# элементу списка. 
# на данный момент каждый элемент списка является str, так как любые 
# введенные данные по умолчанию являются str 

print(type(a[0]), a[0])
# используем map для преобразования в int каждого элемента списка 
# c дальнейшим преобразованием в list обратно
print("\n")
print("--- введите цифры через пробел 2 ---")
b = list(map(int, input().split()))
print(type(b), b)
print(type(b[0]), b[0])

print("\n")
print("--- Функция filter ---")

# filter - возвращает элементы, для которых, переданная ей функция 
# возвращает True.  filter(func, *iterables)

# предположительно имея список 

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

def odd(x):
    return x%2
# далее вызов функции filter и обращение к итератору через next()

b = map(odd, lst)
print(type(b), b)

d = list(filter(odd, lst))
print(type(d), d)

print(next(b))

# применимо так же с лямбда функциями вместо определения отдельной функции
# пример применения с кортежем

lst = ("Москва1", "Рига", "Рига2", "Москва")
res = list(filter(str.isalpha, lst))
print(type(res), res)

print("\n")
print("--- Функция zip ---")

# Позволяет объеденить между собой соответствующие элементы упорядоченных
# коллекций 

col1 = [1, 2, 3, 4, 5]
col2 = [6, 7, 8, 9, 10, 11]

# создаются коллекции с  кортежами. При этом новая колекция будет содержать
# равное количество пар , остальные будут отброшены!

it = zip(col1, col2)
print(list(it))


# Задания для самоподготовки

# 1. Поставить в соответствие следующим английским символам русские буквы:
# h – х, e – е, l – л, o – о, w – в, r – р, d – д
# и преобразовать строку «hello world!» в русские символы.

#2. Дан текст:

#t = """Куда ты скачешь гордый конь, 
#И где опустишь ты копыта? 
#О мощный властелин судьбы! 
#Не так ли ты над самой бездной, 
#На высоте, уздой железной 
#Россию поднял на дыбы?"""

# Необходимо выделить каждое второе слово из этого стихотворения и 
# представить результат в виде упорядоченного списка. (Подумайте как 
# реализовать алгоритм с наименьшими затратами по памяти).

# 3. Реализовать алгоритм для нахождения всех делителей натурального 
# числа N. Число N вводится с клавиатуры. Для начала можно реализовать 
# простым перебором всех N возможных чисел (делителей). Затем, подумайте, 
# как можно оптимизировать по скорости этот алгоритм.
